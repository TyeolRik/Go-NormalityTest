package normality_test

import (
	"fmt"
	"sort"
	"testing"

	"github.com/tyeolrik/Go-NormalityTest/normality"
)

var sample = []float64{2.715255, 4.33914, -1.118931, -2.156568, 1.266901, -1.326658, 0.9565732, 3.182666, 0.01547201, -1.377914, 0.5007955, 6.481162, 3.860975, 1.783466, -0.4482823, -2.936889, 1.345779, 2.947224, 3.191697, 1.325825, -0.3846492, 1.574538, -2.15864, 1.096588, 1.394304, -0.2624678, 2.656648, 0.01231827, -1.719163, 1.232992, -1.158093, 1.550168, 1.916592, -0.08923261, 3.185951, 2.167025, 3.272629, 1.898028, -1.951152, -0.01649263, 3.375195, -0.3490237, -1.204986, 3.359115, 1.222774, 2.661841, 0.4392351, 2.530504, -1.316901, 1.76175, 2.799478, -1.052836, -0.3668508, 1.525852, 1.832099, 0.03429411, -2.739387, 1.235909, 2.572988, -0.697549, -0.3644261, 3.003091, -0.2545701, -0.6182925, -1.122374, 1.512991, 4.385916, -2.99137, 1.340934, 0.3866616, -2.429485, -2.279955, 2.130824, 2.918937, 2.25043, 2.308675, 0.1964105, -0.9212485, -0.6971009, 0.340871, -0.1454578, -0.01678931, 1.000604, 7.355795, 2.349808, 2.703938, 7.690159, -0.03127976, 1.98415, -0.04427895, -1.086214, 1.636722, 3.27651, -0.2300107, -1.130372, -1.626877, -2.639315, 0.6021899, 0.603432, 3.443695, -1.418807, 2.659942, -0.143755, -1.039916, 2.857923, -2.139111, -0.42516, -0.9590406, 2.288707, 1.636662, 2.576139, 0.9447891, 1.68273, -1.436785, 4.433016, 2.890687, -2.141242, -2.782049, 2.71131, 3.334451, 0.02299259, 2.93622, 1.384044, -1.842186, -1.255653, 1.056862, 1.041097, -0.1301982, 1.061825, 1.797787, 1.433931, 5.183228, 2.583985, -1.06194, 1.51828, 0.906155, -2.029831, 6.485201, -1.125721, 2.264395, 1.651182, 2.682056, 5.717096, 0.6131026, 2.173641, 2.350861, 0.9653854, 4.65549, 0.1693548, 0.7862162, -2.155705, 1.209273, 3.93136, 2.289744, 1.492181, 3.998801, 4.113135, 3.77306, 3.42987, 2.145139, 0.01493481, 0.1590123, 1.344138, 1.982607, 5.551254, 1.986407, -0.1056641, 1.520272, -0.1490285, 0.6441602, 2.753237, -0.5025871, 2.227155, -1.528006, 3.407544, 2.632916, 0.5000334, -3.734713, 0.6501563, 1.107396, 1.66527, -0.956099, -1.548242, -1.302935, 2.231447, -0.6558767, -0.7200109, -0.4376688, -1.384246, 5.784673, -0.05206177, -1.489797, 2.599339, -0.5246307, 0.0173662, 3.151255, 0.02221434, -0.2512048, 1.07381, -3.128076, 3.004089, 2.761876, -0.002777094, 1.579909, -1.409846, -0.8888064, 5.82755, 3.448778, -0.05305061, -0.2231744, 0.4813138, 3.976226, -0.9828887, 1.397518, -2.94272, 0.4716585, -0.7108734, 2.436745, 2.744786, 1.191326, -1.319024, -1.914625, 3.359929, 0.1444342, -0.5393335, -2.935893, -2.352131, 5.26094, 2.275221, -2.981016, -1.369861, 2.389093, 1.689333, -0.5973095, 1.920843, 2.275786, 1.133213, 4.162161, -0.6116114, 1.783616, 2.232778, -0.2156131, -0.4565863, -1.559646, 1.655789, 2.629042, 3.300038, 2.995576, -0.3615458, 0.09662463, -2.183526, 5.160123, 2.014757, 2.886048, 2.670069, 0.4958648, -0.05572403, 1.118744, -0.3430954, -1.614637, 1.598248, 3.143261, 2.845775, 0.1070984, 2.778533, 0.683858, 0.1616252, 3.246303, -2.775951, 1.090895, 2.171718, -1.133232, 0.3680084, -0.3357886, -1.546014, 3.92, 3.438553, -1.324045, -3.228711, -0.619181, 2.464693, 0.2813104, -0.763689, 0.8309688, -0.2247152, 3.079605, 2.323465, 1.586199, 2.475249, 1.488498, 5.041659, 1.314627, -0.2161738, 1.207491, 1.627793, 1.825128, 0.1405974, 1.733234, -0.2381632, -0.3468507, 0.5083543, -1.190721, 0.3651887, 2.237822, -1.698841, 0.2032668, -0.2545859, 4.081723, -0.8386759, 1.093853, 1.978116, 2.187255, -1.257981, 0.1601044, 0.8198443, -0.5451504, 2.181054, -1.605846, 1.296812, 0.1597917, 2.377326, 3.625584, 2.851365, -0.2219421, 2.968931, 2.392156, -3.910443, 0.7657932, 3.611621, -0.3675067, 3.986814, 2.491329, -1.616172, 4.599963, -1.212759, 3.295563, 0.4635235, 0.5947823, 5.652756, 1.449203, -3.285265, 1.082783, 0.8127832, -0.7812924, 1.340625, 2.746833, 3.570793, 1.821376, 3.850789, 1.720535, -0.5282407, 1.687417, -1.269561, -2.516611, 0.06578395, 4.312962, 3.28125, 1.28913, 0.2056168, 1.996662, 0.172731, 1.041657, 2.921316, -2.020807, 1.542058, 1.533281, -0.2363614, 1.079749, 1.593211, 1.888477, 3.963618, 5.677509, 1.413087, 1.163188, 1.973969, -2.990047, 0.1971016, 0.7150971, 4.505966, -1.476006, 2.100448, -0.1465448, 0.4431997, 2.97826, -0.03732313, 2.530986, 2.594226, -1.781913, 0.25638, 0.002388184, 4.89067, 6.009053, 2.57213, 1.441875, 1.43066, -0.4867727, -0.4825586, 3.136923, -1.729068, -0.1559303, 2.411655, 1.546449, 4.653313, 4.075979, 1.227362, -2.395085, 3.472504, 2.218111, 1.991833, 2.260763, 1.694709, 1.168853, 1.462568, 3.123844, 2.934467, 5.591093, -2.581477, -0.5663434, -1.216515, 0.9746176, 0.346052, 0.8895542, 1.186625, 0.9008019, 1.598264, 1.893599, -2.227099, 0.3962234, 0.1527385, -2.657778, -0.8606076, -0.08108457, 2.976961, 0.1407955, -4.572352, 2.147368, 5.316801, 2.93435, 4.62334, 0.8084554, 1.67443, 4.83565, -1.185659, 2.267022, 2.735023, 0.1855099, 1.195665, 3.376545, 2.198484, 2.486597, 0.05989809, -1.359474, 4.252366, -3.002358, 1.048298, 1.136448, -0.02649484, 2.318047, 0.5403192, -0.4594202, 1.371615, 0.06282347, -0.8616802, 1.827082, 1.880097, 0.3937318, 1.831545, 0.1833735, 3.395264, -1.074108, 3.011658, 0.3320416, -1.072802, 0.1836574, 1.955836, -0.1077499, 1.678898, -0.6051345, -0.2547635, 2.565041, 0.4178436, 0.426885, 3.277903, -2.583509, 2.952521, 1.935394, -0.8467153, -0.06571145, -1.527969, -0.9828582, -0.6209887, -0.6120539, 0.8178822, 0.9731091, 2.154567, 0.5611717, 0.4542028, 1.737235, 0.5687854, -0.248469, 2.413683, 0.07507664, 1.486515, -0.409037, -0.01472354, 1.897701, 4.118041, 0.8320374, 1.598622, -0.5391116, 0.4584688, 2.663667, 4.125393, 0.9835047, -2.227798, 0.5702954, -1.744063, 3.67442, 1.273396, 2.289746, -1.54212, 0.8199932, 2.65768, -1.877055, -2.123648, 1.030294, 2.181087, 3.776777, -0.04121503, 3.347317, 2.296025, 1.600318, 0.4183525, 0.5434908, 1.560405, 1.423481, -1.094026, 0.7800082, -0.1556057, 1.744749, -0.4706983, -2.153862, -1.318402, -0.4633303, -0.2192155, 2.124073, -1.640144, 0.3419344, 0.9587108, 0.5314884, 2.107519, 2.663062, -2.374711, -1.116075, 1.264925, 2.083104, 3.753546, 0.6658996, 0.764134, -0.4851412, -1.97599, 5.443577, -0.8419361, -0.6160452, 3.150145, 0.6960796, -0.8840611, 0.5819071, -1.132164, -3.483475, -1.272353, 0.3679508, 2.15185, 1.99232, 2.904499, 2.87659, -1.271019, 0.100273, 2.021116, -0.9989132, 1.730233, 1.501919, 2.49767, 1.671498, -0.3245406, 2.02642, -2.884866, -1.953519, 0.389284, -1.120757, 2.333796, 5.733718, -1.078792, -0.8198887, -0.3365728, -0.4182274, 0.1395219, 1.792756, 3.246127, 1.607421, 0.4524756, 0.4280131, 1.590772, 2.016359, 1.828978, -1.666244, -0.06541279, -0.8557886, 1.105655, -1.318278, -0.6567747, 1.45205, 2.397033, 2.956469, -0.5171796, -0.4362019, 2.949887, -0.03440038, 1.206146, -1.030224, 3.313598, 0.2545406, 1.005346, -2.623142, 1.386271, 0.3595069, -1.340568, 0.3714421, 3.878904, -2.256707, 0.8057254, 3.289998, -1.031653, -1.957775, 2.247877, 0.1918035, 0.517504, 1.990742, -3.120251, 1.794044, 0.07764157, 3.831835, 4.527211, 5.352622, 0.1302346, 3.063719, 2.501988, -0.848282, 6.621023, 4.381281, 5.724526, 3.201786, -0.4605589, -0.1390901, -1.114517, -1.359269, 2.95402, -1.483211, -0.241267, 1.5391, 0.2631723, 1.24025, -2.38428, 2.059502, -0.5886117, 1.565653, 1.631583, 1.709981, 2.204054, 1.7246, 0.5299292, 0.4621717, 4.255156, -1.85579, -0.6264377, 0.2093809, 2.794713, -1.900759, -0.3897528, 2.356724, 0.802201, -1.565142, -0.1531395, -0.2754524, 1.54667, -0.05310874, -2.411065, 2.41242, 1.406144, -0.2511396, 4.181557, 2.154179, 6.12906, -1.836926, -0.7270139, -0.4198483, 2.035439, 2.299736, -2.450525, 0.8148274, 4.761314, 3.325556, 2.612946, -0.9482832, -0.9931388, 0.3469977, 0.6683724, -3.233082, -0.08493602, 3.047294, 3.171818, 4.349899, -0.09347599, 4.141911, 2.671629, 5.367805, 1.04608, 3.754909, -0.3331223, 1.136617, 1.271396, 1.645162, 3.419353, 0.1603155, 1.392229, -5.768379, -0.03572432, 3.104147, -0.005536829, -1.55411, -0.282711, 2.994963, 1.718024, -1.530703, 0.1961618, 2.536043, 2.946181, 5.151223, -2.00597, 0.9896963, 0.7517767, 1.687989, -1.157038, 3.076023, 3.708647, 2.300926, -1.980402, 1.64735, -0.7873035, 0.4003075, -0.2592592, 0.57954, -2.209921, 2.968171, -1.530819, 0.7517477, 0.4177272, 5.146135, 5.857618, -0.03280145, 3.044028, 0.8333388, -1.647186, 0.0251321, 2.330542, 0.8900445, 4.965475, 2.393411, 4.967692, 2.844395, -2.669899, 0.2050583, 0.2063291, 0.6856686, -0.8572767, 1.342964, -2.525332, 2.440123, 6.453884, -0.5483623, 0.7405945, 2.276971, 0.7152344, 1.252958, 0.5098077, 3.468791, 1.338906, 1.730008, 0.2927038, 3.579444, 0.9871378, 2.104282, 2.114205, 2.304058, 0.03401456, -0.03531588, -0.1139021, 0.5766827, 3.316393, 2.290245, 1.190818, 3.853348, 0.9516883, 3.255389, -0.08068212, -3.476587, -0.5026364, 2.135456, 4.785593, 3.305426, -1.292677, -1.226937, -2.753467, 3.369105, 0.6744223, 0.1104698, -2.03484, 3.849598, 0.8196347, 0.3214558, -0.7094046, -1.586199, 4.231441, 0.9254606, 0.3397837, 0.6664766, 2.850593, 0.7972408, -4.360803, 4.146683, 4.301527, 3.905208, 0.3162814, 2.78657, 1.911897, 0.09593579, 1.955737, -2.457961, -0.5096949, 3.119727, -1.052116, -2.288756, 2.88456, 1.885282, -3.630587, 2.436787, 0.3636453, 0.5848722, 1.861403, 1.09142, -0.499701, -0.7436869, 1.049029, 2.856199, -0.5545392, 1.712765, 0.3780844, 0.04580409, 0.01231113, 2.938049, 0.3236872, 0.3535387, 2.732994, 2.890922, -0.7988064, 2.458085, 1.175919, -0.3472282, 1.574176, 2.228052, 4.646086, 3.590669, 1.957718, -1.967463, 3.905812, 0.3143618, -0.01232741, 1.925614, -2.23656, -2.29858, -0.2728682, 0.2608393, 0.4369874, 2.114461, 4.020969, 1.433257, -0.5016765, 0.229134, 1.805119, -1.639702, 3.732292, -1.769633, 2.12051, 2.321512, 7.288131, 4.00991, -0.3519456, -0.4409749, 2.514792, -0.591946, 3.137154, 1.841059, 2.952081, 1.730391, 2.10195, 3.029082, 1.018147, -1.646251, -1.254061, 4.896575, -2.718133, 4.135537, -1.335844, -1.536446, -0.2599035, 0.6754754, 2.985014, 2.979333, -2.868207, -0.3154622, 2.619702, 0.7581635, -1.18801, -4.137834, -1.096552, -4.243098, 1.828876, 4.002895, -0.1756346, 1.452416, 1.013675, -0.4864161, -0.754947, 1.711088, 2.904884, -0.6551745, 4.21477, -0.9539632, 3.498437, 3.599354, 2.166213, 2.229051, -1.421851, -0.3276092, 2.627714, 0.9132693, 0.4237087, -1.240036, -1.801705, 5.553797, -2.805808, -0.3980577, 0.6345475, -1.349475, 1.609672, 1.577711, -1.69444, 0.5350107, -0.76368, 0.2168276, 0.0003972836, 0.9504853, 1.651912, 1.597403, 0.6044808, -1.7328, -1.255322, 1.711554, 1.40826, 0.1344859, 0.122886, -0.8670387, -0.6532589, 1.159854, 1.731987, 2.913031, 1.586132, 0.6219704, -1.295084, -2.191942, -1.813522, 3.677354, -0.3210138, -0.6703871, 4.585412, 4.207964, -0.5829763, 1.526401, 1.520113, -1.585307, 0.3607658, -0.9339608, 1.332721, 1.547129, 1.931438, -2.334663, 1.40226, -0.6021688, 3.330233, -2.601076}

func TestQQPlot(t *testing.T) {
	// data := normality.ReadFileAsFloat64Slice("../sample_data/QELP_DataSet_057.txt")
	data := normality.ReadFileAsFloat64Slice("../sample_data/QQplotDataset.txt")
	normality.QQplot(&data)
}

func TestHistogram(t *testing.T) {
	data := normality.ReadFileAsFloat64Slice("../sample_data/QQplotDataset.txt")
	normality.Histogram(data)
}

func TestNormSINV(t *testing.T) {
	fmt.Println(normality.Norm_S_INV(0.75))
}

// Same Example from Official Microsoft document
func TestGet_StandardDeviation(t *testing.T) {
	data := []float64{1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299}
	mean, stdev_s := normality.Get_AverageAndStandardDeviation(&data)
	// Expected values (Correct answer)
	// mean = 1328.6
	// stdev_s = 27.46391571984349
	fmt.Println("              Mean : ", mean)
	fmt.Println("Standard Deviation : ", stdev_s)
}

func TestGetQuantileType7(t *testing.T) {
	data := []float64{1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299}
	sort.Float64s(data)
	Q1position := normality.GetQuantileType7(&data, 0.25)
	Q3position := normality.GetQuantileType7(&data, 0.75)
	fmt.Println("Q1", Q1position)
	fmt.Println("Q3", Q3position)
}

func TestD_AgostinosKsquared(t *testing.T) {
	// data := normality.ReadFileAsFloat64Slice("../sample_data/QQplotDataset.txt")
	data := sample
	Ksquared, P_value := normality.D_AgostinosKsquared(&data)
	fmt.Println(Ksquared)
	fmt.Println(P_value)
}

func TestJarqueBera(t *testing.T) {
	data := sample
	JB, P_value := normality.JarqueBera(&data)
	fmt.Println("     JB", JB)
	fmt.Println("P_value", P_value)
}

func TestAndersonDarling(t *testing.T) {
	data := sample
	A, P_value := normality.AndersonDarling(data)
	fmt.Println(A)
	fmt.Println(P_value)
}

func TestCramerVonMises(t *testing.T) {
	data := sample
	T, P_value := normality.CramerVonMises(data)
	fmt.Println("test statistics T", T)
	fmt.Println("          P_value", P_value)
}

func TestNormalDistribution_CDF(t *testing.T) {
	fmt.Println(normality.NormalDistribution_CDF(2, 0, 1))
}

func TestKolmogorovSmirnov(t *testing.T) {
	// data := sample
	// normality.KolmogorovSmirnovInR(data)
}

func TestEmpiricalDistributionFunction(t *testing.T) {
	// 1data := []float64{11, 22, 33, 44, 55, 66, 77, 88, 99}
	data := sample
	sort.Float64s(data)
	fmt.Println(data[0])
	fmt.Println(normality.EmpiricalDistributionFunction(&data, data[0]))
}

func TestLilliefors(t *testing.T) {
	data := sample
	T, P_value := normality.Lilliefors(data)
	fmt.Println("test statistics T", T)
	fmt.Println("          P_value", P_value)
}
